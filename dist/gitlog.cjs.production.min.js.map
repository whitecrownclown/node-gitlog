{"version":3,"file":"gitlog.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["import { exec, execSync, ExecSyncOptions, ExecException } from \"child_process\";\nimport { existsSync } from \"fs\";\nimport createDebugger from \"debug\";\n\nconst debug = createDebugger(\"gitlog\");\n\nconst delimiter = \"\\t\";\nconst fieldMap = {\n  hash: \"%H\",\n  abbrevHash: \"%h\",\n  treeHash: \"%T\",\n  abbrevTreeHash: \"%t\",\n  parentHashes: \"%P\",\n  abbrevParentHashes: \"%P\",\n  authorName: \"%an\",\n  authorEmail: \"%ae\",\n  authorDate: \"%ai\",\n  authorDateRel: \"%ar\",\n  committerName: \"%cn\",\n  committerEmail: \"%ce\",\n  committerDate: \"%cd\",\n  committerDateRel: \"%cr\",\n  subject: \"%s\",\n  body: \"%b\",\n  rawBody: \"%B\",\n  tags: \"%D\",\n} as const;\nexport type CommitField = keyof typeof fieldMap;\n\nconst notOptFields = [\"status\", \"files\"] as const;\ntype NotOptField = typeof notOptFields[number];\n\nconst defaultFields = [\n  \"abbrevHash\",\n  \"hash\",\n  \"subject\",\n  \"authorName\",\n  \"authorDate\",\n] as const;\ntype DefaultField = typeof defaultFields[number];\n\nexport interface GitlogOptions<Fields extends string = DefaultField> {\n  /** The location of the repo */\n  repo: string;\n  /**\n   * Much more likely to set status codes to 'C' if files are exact copies of each other.\n   *\n   * @default false\n   */\n  findCopiesHarder?: boolean;\n  /**\n   * Find commits on all branches instead of just on the current one.\n   *\n   * @default false\n   */\n  all?: boolean;\n  /**\n   * Pass the -m option to includes files in a merge commit\n   *\n   * @default false\n   */\n  includeMergeCommitFiles?: boolean;\n  /**\n   * The number of commits to return\n   *\n   * @default 10\n   */\n  number?: number;\n  /** An array of fields to return from the log */\n  fields?: readonly Fields[];\n  /**\n   * Below fields was returned from the log:\n   *\n   * - files - changed files names (array)\n   * - status - changed files status (array)\n   *\n   * @default true\n   */\n  nameStatus?: boolean;\n  /**\n   * Show only commits in the specified branch or revision range.\n   * By default uses the current branch and defaults to HEAD (i.e.\n   * the whole history leading to the current commit).\n   */\n  branch?: string;\n  /** File filter for the git log command */\n  file?: string;\n  /** Limit the commits output to ones with author header lines that match the specified pattern. */\n  author?: string;\n  /** Limit the commits output to ones with committer header lines that match the specified pattern. */\n  committer?: string;\n  /** Show commits more recent than a specific date. */\n  since?: string;\n  /** Show commits more recent than a specific date. */\n  after?: string;\n  /** Show commits older than a specific date */\n  until?: string;\n  /** Show commits older than a specific date */\n  before?: string;\n  /** Specify some options to be passed to the .exec() method */\n  execOptions?: ExecSyncOptions;\n}\n\nconst defaultOptions = {\n  number: 10,\n  fields: defaultFields,\n  nameStatus: true,\n  includeMergeCommitFiles: false,\n  findCopiesHarder: false,\n  all: false,\n};\n\n/** Add optional parameter to command */\nfunction addOptional<Field extends string = DefaultField>(\n  command: string,\n  options: GitlogOptions<Field>\n) {\n  let commandWithOptions = command;\n  const cmdOptional = [\n    \"author\",\n    \"since\",\n    \"after\",\n    \"until\",\n    \"before\",\n    \"committer\",\n  ] as const;\n\n  for (let i = cmdOptional.length; i--; ) {\n    if (options[cmdOptional[i]]) {\n      commandWithOptions += ` --${cmdOptional[i]}=\"${options[cmdOptional[i]]}\"`;\n    }\n  }\n\n  return commandWithOptions;\n}\n\n/** Parse the output of \"git log\" for commit information */\nconst parseCommits = <T extends string>(\n  commits: string[],\n  fields: readonly T[],\n  nameStatus: boolean\n) => {\n  type Commit = Record<T | NotOptField, any>;\n\n  return commits.map((rawCommit) => {\n    const parts = rawCommit.split(\"@end@\");\n    const commit = parts[0].split(delimiter);\n\n    if (parts[1]) {\n      const parseNameStatus = parts[1].trimLeft().split(\"\\n\");\n\n      // Removes last empty char if exists\n      if (parseNameStatus[parseNameStatus.length - 1] === \"\") {\n        parseNameStatus.pop();\n      }\n\n      // Split each line into it's own delimited array\n      const nameAndStatusDelimited = parseNameStatus.map((d) =>\n        d.split(delimiter)\n      );\n\n      // 0 will always be status, last will be the filename as it is in the commit,\n      // anything in between could be the old name if renamed or copied\n      nameAndStatusDelimited.forEach((item) => {\n        const status = item[0];\n        const tempArr = [status, item[item.length - 1]];\n\n        // If any files in between loop through them\n        for (let i = 1, len = item.length - 1; i < len; i++) {\n          // If status R then add the old filename as a deleted file + status\n          // Other potentials are C for copied but this wouldn't require the original deleting\n          if (status.slice(0, 1) === \"R\") {\n            tempArr.push(\"D\", item[i]);\n          }\n        }\n\n        commit.push(...tempArr);\n      });\n    }\n\n    debug(\"commit\", commit);\n\n    // Remove the first empty char from the array\n    commit.shift();\n\n    const parsed: Partial<Commit> = {};\n\n    if (nameStatus) {\n      // Create arrays for non optional fields if turned on\n      notOptFields.forEach((d) => {\n        parsed[d] = [];\n      });\n    }\n\n    commit.forEach((commitField, index) => {\n      if (fields[index]) {\n        if (fields[index] === \"tags\") {\n          const tags: Array<String> = [];\n          const start = commitField.indexOf(\"tag: \");\n          if (start >= 0) {\n            commitField\n              .substr(start + 5)\n              .trim()\n              .split(\",\")\n              .forEach(function (tag) {\n                tags.push(tag.trim());\n              });\n          }\n          parsed[fields[index]] = tags;\n        } else {\n          parsed[fields[index]] = commitField;\n        }\n      } else if (nameStatus) {\n        const pos = (index - fields.length) % notOptFields.length;\n\n        debug(\n          \"nameStatus\",\n          index - fields.length,\n          notOptFields.length,\n          pos,\n          commitField\n        );\n\n        const arr = parsed[notOptFields[pos]];\n\n        if (Array.isArray(arr)) {\n          arr.push(commitField);\n        }\n      }\n    });\n\n    return parsed as Commit;\n  });\n};\n\n/** Run \"git log\" and return the result as JSON */\nfunction createCommand<T extends CommitField | DefaultField = DefaultField>(\n  options: GitlogOptions<T>\n) {\n  // Start constructing command\n  let command = \"git log \";\n\n  if (options.findCopiesHarder) {\n    command += \"--find-copies-harder \";\n  }\n\n  if (options.all) {\n    command += \"--all \";\n  }\n\n  if (options.includeMergeCommitFiles) {\n    command += \"-m \";\n  }\n\n  command += `-n ${options.number}`;\n\n  command = addOptional(command, options);\n\n  // Start of custom format\n  command += ' --pretty=\"@begin@';\n\n  // Iterating through the fields and adding them to the custom format\n  if (options.fields) {\n    options.fields.forEach((field) => {\n      if (!fieldMap[field] && !notOptFields.includes(field as any)) {\n        throw new Error(`Unknown field: ${field}`);\n      }\n\n      command += delimiter + fieldMap[field];\n    });\n  }\n\n  // Close custom format\n  command += '@end@\"';\n\n  // Append branch (revision range) if specified\n  if (options.branch) {\n    command += ` ${options.branch}`;\n  }\n\n  // File and file status\n  if (options.nameStatus) {\n    command += \" --name-status\";\n  }\n\n  if (options.file) {\n    command += ` -- ${options.file}`;\n  }\n\n  debug(\"command\", options.execOptions, command);\n\n  return command;\n}\n\ntype GitlogError = ExecException | string | null;\n\ntype CommitBase<Field extends string> = Record<Field, string>;\ntype CommitBaseWithFiles<Field extends string> = Record<\n  Field | \"status\",\n  string\n> & { files: string[] };\n\nfunction gitlog<Field extends CommitField = DefaultField>(\n  userOptions: GitlogOptions<Field> & { nameStatus: false },\n  cb: (err: GitlogError, commits: CommitBase<Field>[]) => void\n): void;\n\nfunction gitlog<Field extends CommitField = DefaultField>(\n  userOptions: GitlogOptions<Field>,\n  cb: (err: GitlogError, commits: CommitBaseWithFiles<Field>[]) => void\n): void;\n\nfunction gitlog<Field extends CommitField = DefaultField>(\n  userOptions: GitlogOptions<Field> & { nameStatus: false }\n): CommitBase<Field>[];\n\nfunction gitlog<Field extends CommitField = DefaultField>(\n  userOptions: GitlogOptions<Field>\n): CommitBaseWithFiles<Field>[];\n\nfunction gitlog<Field extends CommitField = DefaultField>(\n  userOptions: GitlogOptions<Field>,\n  cb?:\n    | ((err: GitlogError, commits: CommitBase<Field>[]) => void)\n    | ((err: GitlogError, commits: CommitBaseWithFiles<Field>[]) => void)\n): CommitBase<Field>[] | CommitBaseWithFiles<Field>[] | void {\n  if (!userOptions.repo) {\n    throw new Error(\"Repo required!\");\n  }\n\n  if (!existsSync(userOptions.repo)) {\n    throw new Error(\"Repo location does not exist\");\n  }\n\n  // Set defaults\n  const options = {\n    ...(defaultOptions as any),\n    ...userOptions,\n  };\n  const execOptions = { cwd: userOptions.repo, ...userOptions.execOptions };\n  const command = createCommand(options);\n\n  if (!cb) {\n    const stdout = execSync(command, execOptions).toString();\n    const commits = stdout.split(\"@begin@\");\n\n    if (commits[0] === \"\") {\n      commits.shift();\n    }\n\n    debug(\"commits\", commits);\n    return parseCommits(commits, options.fields, options.nameStatus);\n  }\n\n  exec(command, execOptions, (err, stdout, stderr) => {\n    debug(\"stdout\", stdout);\n    const commits = stdout.split(\"@begin@\");\n\n    if (commits[0] === \"\") {\n      commits.shift();\n    }\n\n    debug(\"commits\", commits);\n\n    cb(\n      stderr || err,\n      parseCommits(commits, options.fields, options.nameStatus)\n    );\n  });\n}\n\nexport function gitlogPromise<Field extends CommitField = DefaultField>(\n  options: GitlogOptions<Field> & { nameStatus: false }\n): Promise<CommitBase<Field>[]>;\n\nexport function gitlogPromise<Field extends CommitField = DefaultField>(\n  options: GitlogOptions<Field>\n): Promise<CommitBaseWithFiles<Field>[]>;\n\nexport function gitlogPromise<Field extends CommitField = DefaultField>(\n  options: GitlogOptions<Field>\n): Promise<CommitBase<Field>[]> {\n  return new Promise((resolve, reject) => {\n    gitlog(options, (err, commits) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(commits);\n      }\n    });\n  });\n}\n\nexport default gitlog;\n"],"names":["debug","fieldMap","hash","abbrevHash","treeHash","abbrevTreeHash","parentHashes","abbrevParentHashes","authorName","authorEmail","authorDate","authorDateRel","committerName","committerEmail","committerDate","committerDateRel","subject","body","rawBody","tags","notOptFields","defaultOptions","number","fields","nameStatus","includeMergeCommitFiles","findCopiesHarder","all","parseCommits","commits","map","rawCommit","parts","split","commit","parseNameStatus","trimLeft","length","pop","d","forEach","item","status","tempArr","i","len","slice","push","shift","parsed","commitField","index","start","indexOf","substr","trim","tag","pos","arr","Array","isArray","gitlog","userOptions","cb","repo","Error","existsSync","options","execOptions","cwd","command","commandWithOptions","cmdOptional","addOptional","field","includes","branch","file","createCommand","execSync","toString","exec","err","stdout","stderr","Promise","resolve","reject"],"mappings":"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"}